name: Build, Lint, e2e & ct test
on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          node-version: 16.10.0
      - uses: bahmutov/npm-install@v1.8.17
        with: { useRollingCache: true } # recommended for large projects
        env:
          CYPRESS_INSTALL_BINARY: 0 # no need to install the Cypress binary, we are already using the docker image in the e2e job
      # - name: Reset coverage (Coverage_step1)
      # reset state at the beginning for new unit + e2e coverage evaluation
      # run: yarn cov:reset

  unit-test:
    needs: [install-dependencies]
    name: Run Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: bahmutov/npm-install@v1.8.17
        with: { useRollingCache: true }
        env:
          CYPRESS_INSTALL_BINARY: 0
      - name: unit-test
        run: yarn test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: jest-coverage
          path: coverage/
          retention-days: 1

  lint:
    needs: install-dependencies
    name: Run Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: bahmutov/npm-install@v1.8.17
        with: { useRollingCache: true }
        env:
          CYPRESS_INSTALL_BINARY: 0
      - name: lint
        run: yarn lint

  cypress-e2e-tests:
    # ran out od parallelization
    # strategy:
    #   matrix:
    #     machines: [1, 2]
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    container: cypress/included:10.2.0 # save time on not having to install cypress
    steps:
      - uses: actions/checkout@v3

      - uses: bahmutov/npm-install@v1.8.17 # save time on dependencies
        with: { useRollingCache: true }

      - name: Cypress e2e tests ðŸ§ª
        uses: cypress-io/github-action@v4.1.1
        with:
          install: false # no need to install because of the above 2
          start: yarn dev # concurrently starts ui and api servers
          wait-on: 'http://localhost:3000'
          browser: chrome
          # ran out of monthly Cypress Dashboard limit
          # record: true
          # parallel: true
          # group: e2e-tests
          # tag: e2e-tests
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          LAUNCH_DARKLY_PROJECT_KEY: ${{ secrets.LAUNCH_DARKLY_PROJECT_KEY }}
          LAUNCH_DARKLY_AUTH_TOKEN: ${{ secrets.LAUNCH_DARKLY_AUTH_TOKEN }}
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy the coverage to coverage-part (Coverage_step2)
        # Copy the e2e coverage for the job to coverage-part folder.
        # Similar to copy:reports script, but instead of "reports" we have an intermediate folder "coverage-part"
        # This is useful for e2e + ct, or parallelized jobs.
        # We call the file parallel-job* since, theoretically, ct and e2e also run in parallel.
        # For the suffix, use unique job id to avoid overwriting the file if multiple jobs run in parallel for e2e or ct.
        run: (mkdir coverage-part || true) && cp coverage-cy/coverage-final.json coverage-part/$GITHUB_JOB-$GITHUB_RUN_ID.json

      - name: Upload artifacts (Coverage_step3)
        uses: actions/upload-artifact@v3.1.0
        with:
          name: coverage-e2e
          path: coverage-e2e/
          retention-days: 1

  # This is just a copy of the above with 2 additional args for visual testing
  cypress-percy-visual-tests:
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    container: cypress/included:10.2.0 # save time on not having to install cypress
    steps:
      - uses: actions/checkout@v3

      - uses: bahmutov/npm-install@v1.8.17 # save time on dependencies
        with: { useRollingCache: true }

      # We could also just add this step onto the original cypress-e2e-tests job
      - name: Cypress visual tests ðŸ§ª
        uses: cypress-io/github-action@v4.1.1
        with:
          install: false # no need to install because of the above 2
          start: yarn dev # concurrently starts ui and api servers
          wait-on: 'http://localhost:3000'
          browser: chrome
          command: yarn percy exec -- cypress run --e2e --spec 'cypress/e2e/ui-integration/user-context-retainment.spec.js' --config video=false,screenshotOnRunFailure=false
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cypress-component-tests:
    # ran out of parallelization
    # strategy:
    #   matrix:
    #     machines: [1, 2] # increase to 2 later: [1, 2]
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    container: cypress/included:10.2.0 # save time on not having to install cypress
    steps:
      - uses: actions/checkout@v3

      - uses: bahmutov/npm-install@v1.8.17 # save time on dependencies
        with: { useRollingCache: true }

      - name: Cypress component tests ðŸ§ª
        uses: cypress-io/github-action@v4.1.1
        with:
          # we have already installed everything
          install: false
          # to run component tests we need to use "cypress run-ct"
          # with component tests since we have a custom command, we pass these parameters in the command instead
          # command: yarn cypress run-ct --record --key=${{ secrets.CYPRESS_RECORD_KEY }} --parallel --browser chrome --group component-tests --tag component-tests --parallel 2
          # if you run out of parallelization, turn it off
          component: true
          browser: chrome
        env:
          # CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy the coverage to coverage-part (Coverage_step2)
        # Same as the e2e job, but for component tests.
        run: (mkdir coverage-part || true) && cp coverage-cy/coverage-final.json coverage-part/$GITHUB_JOB-$GITHUB_RUN_ID.json

      - name: Upload artifacts (Coverage_step3)
        uses: actions/upload-artifact@v3.1.0
        with:
          name: coverage-component
          path: coverage-component/
          retention-days: 1

  download-artifacts:
    needs: [unit-test, cypress-e2e-tests, cypress-component-tests]
    name: coverage artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts (Coverage_step3)
        uses: actions/download-artifact@v3
        with:
          path: coverage-artifacts/

      - name: Combine the coverage (Coverage_step4)
        run: |
          cd coverage-artifacts
          mkdir reports || true
          echo
          echo Copy the coverage data to reports folder
          cp -r coverage-*/. reports/
          cp jest-coverage/coverage-final.json reports/from-jest.json
          echo
          echo current reports/ contents are:
          ls reports
          echo mv reports to root folder
          mv reports ../
          cd ..
          echo
          mkdir .nyc_output || true
          echo merge all the files under reports folder into a nyc report
          echo move the generated coverage.json to .nyc_output/out.json
          yarn combine:reports
          ls
          echo
          echo finalize combined report
          yarn finalize:combined-report

      - name: Upload reports folder
        uses: actions/upload-artifact@v3.1.0
        with:
          name: reports
          path: reports/
          retention-days: 1
